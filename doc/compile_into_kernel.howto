 This file (compile_into_kernel.howto) was created by Ron Rechenmacher <ron@fnal.gov> on
 Aug 29, 2015. "TERMS AND CONDITIONS" governing this file are in the README
 or COPYING file. If you do not have such a file, one can be obtained by
 contacting Ron or Fermi Lab in Batavia IL, 60510, phone: 630-840-3000.
 $RCSfile: compile_into_kernel.howto,v $
 rev="$Revision: 1264 $$Date: 2020-03-04 01:34:56 -0600 (Wed, 04 Mar 2020) $";



1.  edit or patch init/Makfile  (see below)
2a. mkdir include/TRACE
2b. copy or link $TRACE_INC/TRACE/trace.h into include/TRACE
    mkdir include/uapi/TRACE   # for headers_install into INSTALL_HDR_PATH
    ln -s ../../TRACE/trace.h include/uapi/TRACE
3.  copy or link src_modules/trace_.c into init/
4.  edit or patch init/main.c (see below)
5a. add TRACEs into other kernel source (e.g. net/socket.c - see below)
5b. external modules can just include TRACE/trace.h and insert TRACEs
    as opposed to using EXTRA_CFLAGS or CFLAGS_EXTRA, and KBUILD_EXTRA_SYMBOLS
5c. build userspace programs with include path (-I):
       lib/modules/`uname -r`/build/include/TRACE   (if installed)
    or <path_to_source>/include/TRACE

Note: trace_3_init calls trace_proc_add which needs to happen after
      proc_root_init, as indicated in the patch below. If ones desires to add
      TRACEs earlier in the boot process, trace_proc_add could be commented out
      from the trace_3_init, declare and inserted into main.c:start_kernel.
      trace_3_init (without trace_proc_add) can be inserted into main.c:start_kernel
      as early as just after mem_encrypt_init().

==================================================

diff -u init/Makefile{.~1~,}
--- init/Makefile.~1~   2009-12-02 21:51:21.000000000 -0600
+++ init/Makefile       2015-08-29 10:32:45.956138974 -0500
@@ -2,7 +2,7 @@
 # Makefile for the linux kernel.
 #
 
-obj-y                          := main.o version.o mounts.o
+obj-y                          := main.o version.o mounts.o trace_.o
 ifneq ($(CONFIG_BLK_DEV_INITRD),y)
 obj-y                          += noinitramfs.o
 else


diff -u init/main.c{.~1~,}
--- init/main.c.~1~	2020-01-14 08:54:17.000000000 -0600
+++ init/main.c	2020-03-03 23:56:59.058307538 -0600
@@ -80,6 +80,7 @@
 #include <linux/blkdev.h>
 #include <linux/elevator.h>
 #include <linux/sched_clock.h>
+#include <TRACE/trace.h>
 #include <linux/sched/task.h>
 #include <linux/sched/task_stack.h>
 #include <linux/context_tracking.h>
@@ -635,6 +636,8 @@
 	hrtimers_init();
 	softirq_init();
 	timekeeping_init();
+	trace_3_init(); // works after timekeeping_init
+	TRACE(3,"main.c:start_kernel - b4 time_init - after timekeeping_init - timeofday");
 
 	/*
 	 * For best initial stack canary entropy, prepare it after:
@@ -652,6 +655,7 @@
 	time_init();
 	sched_clock_postinit();
 	printk_safe_init();
+	TRACE(2, "main.c:start_kernel trace initialize - TRACE'd lvl2 (printk)");
 	perf_event_init();
 	profile_init();
 	call_function_init();
@@ -671,6 +675,8 @@
 		panic("Too many boot %s vars at `%s'", panic_later,
 		      panic_param);
 
+	TRACE(2,"main.c:start_kernel: trace_3_init called - TRACE lvl2 after console_init()"); /* after console_init() */
+
 	lockdep_info();
 
 	/*
@@ -726,6 +732,8 @@
 	signals_init();
 	seq_file_init();
 	proc_root_init();
+	trace_3_proc_add(traceControl_p->memlen);
+	TRACE(2, "main.c:start_kernel after trace_3_proc_add");
 	nsfs_init();
 	cpuset_init();
 	cgroup_init();
@@ -1067,6 +1075,8 @@
 	int ret;
 
 	kernel_init_freeable();
+	trace_3_sched_switch_hook_add();
+	TRACE(2,"main.c:kernel_init trace_3_sched_switch_hook_add'd");
 	/* need to finish all async __init code before freeing the memory */
 	async_synchronize_full();
 	ftrace_free_init_mem();







# example:

diff -u net/socket.c{.~1~,}
--- net/socket.c.~1~    2015-07-09 13:33:55.000000000 -0500
+++ net/socket.c        2015-08-29 13:52:55.448929180 -0500
@@ -100,6 +100,7 @@
 #ifndef __GENKSYMS__
 #include <net/busy_poll.h>
 #endif
+#include <TRACE/trace.h>             /* TRACE */
 
 #ifdef CONFIG_NET_RX_BUSY_POLL
 unsigned int sysctl_net_busy_read __read_mostly;
@@ -874,6 +875,7 @@
        size_t size = 0;
        int i;
 
+       TRACE( 20, "net/socket.c:do_sock_write" );
        for (i = 0; i < nr_segs; i++)
                size += iov[i].iov_len;
 


