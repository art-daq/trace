#!/bin/sh
# This file (trace_color) was created by Ron Rechenmacher <ron@fnal.gov> on
# Sep 14, 2022. "TERMS AND CONDITIONS" governing this file are in the README
# or COPYING file. If you do not have such a file, one can be obtained by
# contacting Ron or Fermi Lab in Batavia IL, 60510, phone: 630-840-3000.
# $RCSfile: .emacs.gnu,v $
# rev="$Revision: 1.34 $$Date: 2019/04/22 15:23:54 $";


: defaults: 1=red 2=green 3=orange 4=blue 5=magenta 6=cyan 7=while 226=yellow ...
: color_nums can be set in the ENVIRONMENT
test -n "${color_nums-}" || color_nums='1 2 3 4 5 6 7 226 93 87 189 195 177';: Can put color_nums in ENV
num_color_nums=`echo $color_nums | wc -w`
esc=`printf "\033"`

USAGE="\
usage: tcolor [opt] [color_re]...
options:
-t, --threads  -- if no args given, use first $num_color_nums unique thread IDs
                  otherwise use first $num_color_nums unique process IDs
"

show="%x%P %f"
while expr "$1" : -;do
      case $1 in
      '?'|-h|--help) echo "$USAGE"; exit;;
      -t|--threads)  show="%x%i %f"; shift;;
      esac
done


tcolor() { : $*=tids
   # build sed filter --- NOTE: if building for tshow Thread ID -- the parameter list created with be " <tid> "  (w/ space(' ') before and after
   test $# -eq 0 && { tid_list=`TRACE_SHOW="$show" trace_cntl show|awk '!seen[$1]++{printf"\" %s .*\"\n",$1;}'| head -n$num_color_nums`
                      echo found `echo "$tid_list" | wc -l` unique PIDs within 1st 500 tshow lines >&2; eval set -- $tid_list; };: at most,could be less
   test $# -eq 0 && { echo need at least 1 tid; return; }
   tid=$1; : no shift to preserver num args to associate arg with cnum

   for num in `seq 1 $#`;do
      tid=$1; shift
      cnum=`echo $color_nums|cut -d' ' -f$num`
      # Below, the sed substitute command is either s~this~that~ OR s@this@that@
      if expr "$SED" : '.*[Er]' >/dev/null;then
	 expr "$tid" : '.*@' >/dev/null && filt="${filt:+${filt};}s~($tid)~${esc}[38;5;${cnum}m\1${esc}[0m~"   || filt="${filt:+${filt};}s@($tid)@${esc}[38;5;${cnum}m\1${esc}[0m@"
      else
	 expr "$tid" : '.*@' >/dev/null && filt="${filt:+${filt};}s~\($tid\)~${esc}[38;5;${cnum}m\1${esc}[0m~" || filt="${filt:+${filt};}s@\($tid\)@${esc}[38;5;${cnum}m\1${esc}[0m@"
      fi
   done

   expr "$SED" : 'sed ' >/dev/null && { eval "$SED -e '$filt'";true;} || sed $SED -e "$filt"
}

case $1 in
-h|--help)
    echo "Usage: tcolor [-h|--help] [pattern_for_color1]...
If no patterns are given, the default is to apply colors to the first 13 unique Thread IDs.
NOTE: Current, if tcolor is used before tdelta, a pattern which matches before the delta can mess up the delta.
      If PAGER is used, remeber to use the appropriate option to interpret color generating escape sequences (e.g., include -R in LESS env. var.)
      default ANSI color numbers can be overridden via export color_nums='<space_separated_number_list>'
      Patterns may not contain both '~' and '@' characters; if so, one or the other should be replaced with the '.' character OR replace '~' with '\~' or [~].
      Be careful with specifying patterns that match overlapping parts on a line -- counter intuitive output may occur.
The colors are:"
    for num in `seq $num_color_nums`;do
      cnum=`echo $color_nums|cut -d' ' -f$num`
      printf "${esc}[38;5;${cnum}mcolor # $num${esc}[0m\n"
    done
    exit;;
esac

test -n "$PAGER" && { tcolor "$@" | $PAGER;true;} || tcolor "$@"
