File    = table
Product = @UPS_PRODUCT_NAME@

#*************************************************
# Starting Group definition
Group:

Flavor     = ANY
Qualifiers = "@UPS_QUALIFIER_STRING@"

  Action = GetProducts


Common:
  Action = setup
    prodDir()
    setupEnv()
    envSet(${UPS_PROD_NAME_UC}_VERSION, @UPS_PROUDCT_VERSION@)
    exeActionRequired(GetFQDir)
    envSet(${UPS_PROD_NAME_UC}_INC, ${UPS_PROD_DIR}/include)

    exeActionRequired(GetProducts)

    envSet(${UPS_PROD_NAME_UC}_LIB, ${${UPS_PROD_NAME_UC}_FQ_DIR}/lib)
    if ( test `uname` = "Darwin" )
      pathPrepend(DYLD_LIBRARY_PATH, ${${UPS_PROD_NAME_UC}_LIB})
    else()
      pathPrepend(LD_LIBRARY_PATH, ${${UPS_PROD_NAME_UC}_LIB})
    endif ( test `uname` = "Darwin" )

    # add the bin directory to the path
    pathPrepend(PATH, ${${UPS_PROD_NAME_UC}_FQ_DIR}/bin )
    # dropit -E removes non-existent directories
    Execute(dropit -E, NO_UPS_ENV, PATH)

    # Prepend CMAKE_PREFIX_PATH for flavour qualified product
    pathPrepend(CMAKE_PREFIX_PATH, ${${UPS_PROD_NAME_UC}_FQ_DIR})
    pathPrepend(PKG_CONFIG_PATH, ${${UPS_PROD_NAME_UC}_FQ_DIR})
    # Prepend ROOT_INCLUDE_PATH for dictionaries
    pathPrepend(ROOT_INCLUDE_PATH, ${${UPS_PROD_NAME_UC}_INC})

    pathPrepend(MANPATH, ${UPS_PROD_DIR}/@CMAKE_INSTALL_DOCDIR@)

# Copied in from product_deps
envSet( ${UPS_PROD_NAME_UC}_BIN, ${${UPS_PROD_NAME_UC}_FQ_DIR}/bin )
if ( test `expr "${${UPS_PROD_NAME_UC}_BIN}" : '.*[/.]/'` -eq 0 -a -d "${${UPS_PROD_NAME_UC}_BIN}" )
  pathPrepend(PATH, ${${UPS_PROD_NAME_UC}_BIN} )
  # older versions of ups (v4_7_4a) have bug that requires else() clause
else  ()
  execute( true, NO_UPS_ENV )
endif ( test `expr "${${UPS_PROD_NAME_UC}_BIN}" : '.*[/.]/'` -eq 0 -a -d "${${UPS_PROD_NAME_UC}_BIN}" )

envSet( ${UPS_PROD_NAME_UC}_VERSION, ${UPS_PROD_VERSION} )

#doing the following would not get undone upon unsetup
#execute( test $?shell \!= 1 && . ${${UPS_PROD_NAME_UC}_BIN}/trace.sh.functions, NO_UPS_ENV )

if ( test $?shell = 1 )
  addAlias( tnotnull_, set vv=%s && eval test \$\?$vv -eq 1 && eval test -n \"\$$vv\" )
  addAlias( set__,     set )
else()
  addAlias( tnotnull_, eval test -n \"\${%s-}\" )
  addAlias( set__,     sts=$?;xx=%s;var=`expr "$xx" : "\([^=]*\)"`; val=`/bin/echo "$xx" | sed -e "1s/^[^=]*=//;s/'/'\"'\"'/g"`;eval "$var='$val'"; return $sts )
endif ( test $?shell = 1 )
	addAlias( tcntl,   ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl %s )
	addAlias( tshow,   set__ opts=%s;tnotnull_ PAGER && ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl show $opts | $PAGER || ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl show $opts )
	addAlias( tinfo,   ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl info %s )
	addAlias( ttids,   ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl tids %s )
	addAlias( tlvls,   ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl tids %s )
	addAlias( tlvlM,   ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlmskM %s )
	addAlias( tlvlS,   ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlmskS %s )
	addAlias( tlvlT,   ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlmskT %s )
	addAlias( tlvlMg,  ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlmskMg %s )
	addAlias( tlvlSg,  ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlmskSg %s )
	addAlias( tlvlTg,  ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlmskTg %s )
	addAlias( tmode,   ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl mode %s )
	addAlias( tmodeM,  ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl modeM %s )
	addAlias( tmodeS,  ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl modeS %s )
	addAlias( tfreeze, ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl modeM 0 %s )
	addAlias( treset,  ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl reset %s )
	addAlias( tdelta,  set__ opts=%s;tnotnull_ PAGER && ${${UPS_PROD_NAME_UC}_BIN}/trace_delta.pl $opts | $PAGER || ${${UPS_PROD_NAME_UC}_BIN}/trace_delta.pl $opts )
	addAlias( tenv,    ${${UPS_PROD_NAME_UC}_BIN}/trace_envvars.sh %s )
	addAlias( tonM,    ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlset  `bitN_to_mask %s` 0 0; ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl modeM 1 )
	addAlias( tonS,    ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlset  0 `bitN_to_mask %s` 0; ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl modeS 1 )
	addAlias( tonT,    ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlset  0 0 `bitN_to_mask %s` )
	addAlias( toffM,   ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlclr  `bitN_to_mask %s` 0 0 )
	addAlias( toffS,   ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlclr  0 `bitN_to_mask %s` 0 )
	addAlias( toffT,   ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlclr  0 0 `bitN_to_mask %s` )
	addAlias( tonMg,   ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlsetg `bitN_to_mask %s` 0 0; ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl modeM 1 )
	addAlias( tonSg,   ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlsetg 0 `bitN_to_mask %s` 0; ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl modeS 1 )
	addAlias( tonTg,   ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlsetg 0 0 `bitN_to_mask %s` )
	addAlias( toffMg,  ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlclrg `bitN_to_mask %s` 0 0 )
	addAlias( toffSg,  ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlclrg 0 `bitN_to_mask %s` 0 )
	addAlias( toffTg,  ${${UPS_PROD_NAME_UC}_BIN}/trace_cntl lvlclrg 0 0 `bitN_to_mask %s` )

	Action = GetFQDir
	       envSet ( ${UPS_PROD_NAME_UC}_FQ_DIR, ${UPS_PROD_DIR}/@UPS_PRODUCT_FQ@ )

End:
# End Group definition
#*************************************************
